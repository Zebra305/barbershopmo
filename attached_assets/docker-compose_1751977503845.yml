version: '3.7'

services:
  traefik:
    image: traefik:v2.10
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.httpchallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.httpchallenge.entrypoint=web"
      - "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik_data:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - root_default
      - services-network

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "127.0.0.1:5678:5678"
    labels:
      - "traefik.enable=true"
      # Main HTTPS Router (for n8n UI)
      - "traefik.http.routers.n8n-https.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)"
      - "traefik.http.routers.n8n-https.entrypoints=websecure"
      - "traefik.http.routers.n8n-https.tls=true"
      - "traefik.http.routers.n8n-https.tls.certresolver=mytlschallenge"
      # Webhook HTTP Router (for Mollie)
      - "traefik.http.routers.n8n-webhook.rule=(Host(`${SUBDOMAIN}.${DOMAIN_NAME}`) || Host(`69.62.114.108`)) && PathPrefix(`/webhook`)"
      - "traefik.http.routers.n8n-webhook.entrypoints=web"
      - "traefik.http.routers.n8n-webhook.middlewares=redirect-to-https"
      # Webhook HTTPS Router
      - "traefik.http.routers.n8n-webhook-secure.rule=(Host(`${SUBDOMAIN}.${DOMAIN_NAME}`) || Host(`69.62.114.108`)) && PathPrefix(`/webhook`)"
      - "traefik.http.routers.n8n-webhook-secure.entrypoints=websecure"
      - "traefik.http.routers.n8n-webhook-secure.tls=true"
      - "traefik.http.routers.n8n-webhook-secure.tls.certresolver=mytlschallenge"
      # Middlewares
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.n8n-headers.headers.sslredirect=true"
      - "traefik.http.middlewares.n8n-headers.headers.stsincludesubdomains=true"
      - "traefik.http.middlewares.n8n-headers.headers.stspreload=true"
      - "traefik.http.middlewares.n8n-headers.headers.stsseconds=315360000"
      - "traefik.http.middlewares.n8n-headers.headers.browserxssfilter=true"
      - "traefik.http.middlewares.n8n-headers.headers.contenttypenosniff=true"
      - "traefik.http.middlewares.n8n-headers.headers.forcestsheader=true"
      # Service definition
      - "traefik.http.services.n8n.loadbalancer.server.port=5678"
    environment:
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
      - N8N_CORS_ALLOW_ORIGIN=https://${SUBDOMAIN}.${DOMAIN_NAME},http://69.62.114.108
      - WEBHOOK_CORS_ALLOWED_ORIGINS=http://69.62.114.108:8000
    volumes:
      - n8n_data:/home/node/.n8n
      - /root/crypto_ai_sector_data:/root/crypto_ai_sector_data
      - /local-files:/files
    networks:
      - root_default
      - services-network
  snackbar_chat_app:
    build:
      context: /opt/snackbar_chat_app
    container_name: snackbar_chat_app
    labels:
      - "traefik.enable=true"
      # HTTPS router for the same IP
      - "traefik.http.routers.snackbar.rule=Host(`69.62.114.108`)"
      - "traefik.http.routers.snackbar.entrypoints=websecure"
      - "traefik.http.routers.snackbar.tls=true"
      - "traefik.http.services.snackbar.loadbalancer.server.port=80"
    networks:
      - root_default
      - services-network
    restart: always
  # --- NEW QR Code Generator Service ---
  qr_generator_service:
    build:
      context: ./qr_server_app # Directory containing Dockerfile and server script
    container_name: qr_generator_app
    restart: always
    environment:
      - PORT=5000 # The port your Flask/Node.js app will listen on
    networks:
      - root_default
    # You generally don't need to expose ports for internal Docker Compose communication,
    # but you can add '- "5000:5000"' here if you want to access it from the VPS host directly for testing.
    # ports:
    #   - "5000:5000"
  # --- âœ… NEW MP4 to GIF Converter Service ---
  converter:
    build:
      context: ./converter-app # Directory containing the Dockerfile
    container_name: mp4_converter_app
    restart: always
    # --- ADD THIS LINE ---
    command: gunicorn --bind 0.0.0.0:5000 app:app
    # -------------------
    networks:
      - root_default
      - services-network
    volumes:
      - ./converter-app/storage:/uploads # Corrected from your previous code
    labels:
      - "traefik.enable=true"
      # This router exposes the download endpoint for your GIFs
      - "traefik.http.routers.converter.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`) && PathPrefix(`/download`)"
      - "traefik.http.routers.converter.entrypoints=websecure"
      - "traefik.http.routers.converter.tls=true"
      - "traefik.http.routers.converter.tls.certresolver=mytlschallenge"
      - "traefik.http.services.converter.loadbalancer.server.port=5000"
  mysql:
    image: mysql:8.0
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: menu_items_db
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - root_default
      - services-network
volumes:
  traefik_data:
    external: true
  n8n_data:
    external: true
  mysql_data:
    external: true
networks:
  root_default:
    external: true
  services-network:
    driver: bridge
