version: '3.7'

services:
  barbershop:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: barbershop_app
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DATABASE_URL=postgresql://barbershop:barbershop_secure_password@barbershop_db:5432/barbershop
      - SESSION_SECRET=change_this_to_secure_session_secret_in_production
      - ADMIN_USERNAME=admin
      - ADMIN_PASSWORD=admin
    depends_on:
      - barbershop_db
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    networks:
      - root_default
      - services-network
    labels:
      - "traefik.enable=true"
      # Router for /mo path (main barbershop website)
      - "traefik.http.routers.barbershop-mo.rule=Host(`69.62.114.108`) && PathPrefix(`/mo`)"
      - "traefik.http.routers.barbershop-mo.entrypoints=web"
      - "traefik.http.routers.barbershop-mo.middlewares=barbershop-mo-stripprefix"
      # Router for /baas path (admin panel) - redirect to /mo/baas
      - "traefik.http.routers.barbershop-baas.rule=Host(`69.62.114.108`) && PathPrefix(`/baas`)"
      - "traefik.http.routers.barbershop-baas.entrypoints=web"
      - "traefik.http.routers.barbershop-baas.middlewares=barbershop-baas-redirect"
      # Middleware to strip /mo prefix for main site
      - "traefik.http.middlewares.barbershop-mo-stripprefix.stripprefix.prefixes=/mo"
      # Middleware to redirect /baas to /mo/baas
      - "traefik.http.middlewares.barbershop-baas-redirect.redirectregex.regex=^http://([^/]+)/baas(.*)"
      - "traefik.http.middlewares.barbershop-baas-redirect.redirectregex.replacement=http://$${1}/mo/baas$${2}"
      # Service definition
      - "traefik.http.services.barbershop.loadbalancer.server.port=3001"

  barbershop_db:
    image: postgres:15-alpine
    container_name: barbershop_postgres
    environment:
      - POSTGRES_DB=barbershop
      - POSTGRES_USER=barbershop
      - POSTGRES_PASSWORD=barbershop_secure_password
    volumes:
      - barbershop_postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - root_default
      - services-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U barbershop"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  barbershop_postgres_data:
    external: true

networks:
  root_default:
    external: true
  services-network:
    external: true